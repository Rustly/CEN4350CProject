import { AfterContentInit, AfterViewInit, ChangeDetectorRef, ElementRef } from '@angular/core';
import { Subscription } from 'rxjs';
import { Carousel } from './carousel';
import { AnimationTimingFn } from './interfaces';
import { Slider } from './slider';
import { CarouselService } from './carousel.service';
import * as i0 from "@angular/core";
export declare class CarouselComponent implements AfterContentInit, AfterViewInit {
    private elementRef;
    private changeDetection;
    private carouselService;
    maxWidthCarousel: number;
    infinite: boolean;
    responsive: boolean;
    autoSlide: boolean;
    slideToShow: number;
    slideToScroll: number;
    autoslideLimitPercentCard: number;
    strechingLimit: number;
    slideWidth: number;
    slideMaxWidth: number;
    dots: boolean;
    arrows: boolean;
    counter: boolean;
    enableMouseDrag: boolean;
    enableTouch: boolean;
    counterSeparator: string;
    gapBetweenSlides: number;
    animationTimingMs: number;
    maxDomSize: number;
    animationTimingFn: AnimationTimingFn;
    mouseupSubscription: Subscription;
    VChangeSubscription: Subscription;
    resizeSubscription: Subscription;
    carousel: Carousel | undefined;
    slider: Slider | undefined;
    isBrowser: boolean;
    constructor(elementRef: ElementRef<HTMLDivElement>, changeDetection: ChangeDetectorRef, carouselService: CarouselService, platformId: Object);
    ngAfterViewInit(): void;
    ngAfterContentInit(): void;
    listeners(): void;
    /**
     * Reinitialise variables at resize
     */
    resize(): void;
    ngOnDestroy(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<CarouselComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CarouselComponent, "carousel", never, { "maxWidthCarousel": { "alias": "maxWidthCarousel"; "required": false; }; "infinite": { "alias": "infinite"; "required": false; }; "responsive": { "alias": "responsive"; "required": false; }; "autoSlide": { "alias": "autoSlide"; "required": false; }; "slideToShow": { "alias": "slideToShow"; "required": false; }; "slideToScroll": { "alias": "slideToScroll"; "required": false; }; "autoslideLimitPercentCard": { "alias": "autoslideLimitPercentCard"; "required": false; }; "strechingLimit": { "alias": "strechingLimit"; "required": false; }; "slideWidth": { "alias": "slideWidth"; "required": false; }; "slideMaxWidth": { "alias": "slideMaxWidth"; "required": false; }; "dots": { "alias": "dots"; "required": false; }; "arrows": { "alias": "arrows"; "required": false; }; "counter": { "alias": "counter"; "required": false; }; "enableMouseDrag": { "alias": "enableMouseDrag"; "required": false; }; "enableTouch": { "alias": "enableTouch"; "required": false; }; "counterSeparator": { "alias": "counterSeparator"; "required": false; }; "gapBetweenSlides": { "alias": "gapBetweenSlides"; "required": false; }; "animationTimingMs": { "alias": "animationTimingMs"; "required": false; }; "maxDomSize": { "alias": "maxDomSize"; "required": false; }; "animationTimingFn": { "alias": "animationTimingFn"; "required": false; }; }, {}, never, ["*"], true, never>;
}
