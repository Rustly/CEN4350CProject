export class Validation {
    constructor(carousel, slideWidth, slideMaxWidth, gap) {
        this.carousel = carousel;
        this.slideWidth = slideWidth;
        this.slideMaxWidth = slideMaxWidth;
        this.gap = gap;
        this.slideMaxWidthShouldBeGreaterThanSlideWidth();
        this.slideWidthAndGapShouldBeGreaterThanZero();
        this.requiredClassShouldBeAdded();
    }
    slideMaxWidthShouldBeGreaterThanSlideWidth() {
        if (this.slideMaxWidth < this.slideWidth) {
            throw new Error(`slideMaxWidth (value: ${this.slideMaxWidth}) is lower than slideWidth (value: ${this.slideWidth}). Please increase the max width or decrease the slide width.`);
        }
    }
    slideWidthAndGapShouldBeGreaterThanZero() {
        const slideWidthPlusGap = this.slideWidth + this.gap;
        if (slideWidthPlusGap <= 0) {
            throw new Error('Unable to construct Carousel. SlideWidth and gap lower or equal than zero. Please add a positive value for the slideWidth and gap.');
        }
    }
    requiredClassShouldBeAdded() {
        const carouselSlides = this.carousel.querySelectorAll('.carousel-slide');
        if (carouselSlides.length === 0) {
            throw new Error('No elements with "carousel-slide" as class have been found. Please add this class to each of your cards/slides.');
        }
    }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdGlvbi5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Byb2plY3RzL2Nhcm91c2VsL3NyYy9saWIvdmFsaWRhdGlvbi50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiQUFBQSxNQUFNLE9BQU8sVUFBVTtJQUNyQixZQUNtQixRQUF3QixFQUN4QixVQUFrQixFQUNsQixhQUFxQixFQUNyQixHQUFXO1FBSFgsYUFBUSxHQUFSLFFBQVEsQ0FBZ0I7UUFDeEIsZUFBVSxHQUFWLFVBQVUsQ0FBUTtRQUNsQixrQkFBYSxHQUFiLGFBQWEsQ0FBUTtRQUNyQixRQUFHLEdBQUgsR0FBRyxDQUFRO1FBRTVCLElBQUksQ0FBQywwQ0FBMEMsRUFBRSxDQUFDO1FBQ2xELElBQUksQ0FBQyx1Q0FBdUMsRUFBRSxDQUFDO1FBQy9DLElBQUksQ0FBQywwQkFBMEIsRUFBRSxDQUFDO0lBQ3BDLENBQUM7SUFFRCwwQ0FBMEM7UUFDeEMsSUFBSSxJQUFJLENBQUMsYUFBYSxHQUFHLElBQUksQ0FBQyxVQUFVLEVBQUU7WUFDeEMsTUFBTSxJQUFJLEtBQUssQ0FDYix5QkFBeUIsSUFBSSxDQUFDLGFBQWEsc0NBQXNDLElBQUksQ0FBQyxVQUFVLCtEQUErRCxDQUNoSyxDQUFDO1NBQ0g7SUFDSCxDQUFDO0lBRUQsdUNBQXVDO1FBQ3JDLE1BQU0saUJBQWlCLEdBQUcsSUFBSSxDQUFDLFVBQVUsR0FBRyxJQUFJLENBQUMsR0FBRyxDQUFDO1FBRXJELElBQUksaUJBQWlCLElBQUksQ0FBQyxFQUFFO1lBQzFCLE1BQU0sSUFBSSxLQUFLLENBQ2Isb0lBQW9JLENBQ3JJLENBQUM7U0FDSDtJQUNILENBQUM7SUFFRCwwQkFBMEI7UUFDeEIsTUFBTSxjQUFjLEdBQ2xCLElBQUksQ0FBQyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsaUJBQWlCLENBQUMsQ0FBQztRQUVwRCxJQUFJLGNBQWMsQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO1lBQy9CLE1BQU0sSUFBSSxLQUFLLENBQ2IsaUhBQWlILENBQ2xILENBQUM7U0FDSDtJQUNILENBQUM7Q0FDRiIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBWYWxpZGF0aW9uIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgY2Fyb3VzZWw6IEhUTUxEaXZFbGVtZW50LFxyXG4gICAgcHJpdmF0ZSByZWFkb25seSBzbGlkZVdpZHRoOiBudW1iZXIsXHJcbiAgICBwcml2YXRlIHJlYWRvbmx5IHNsaWRlTWF4V2lkdGg6IG51bWJlcixcclxuICAgIHByaXZhdGUgcmVhZG9ubHkgZ2FwOiBudW1iZXJcclxuICApIHtcclxuICAgIHRoaXMuc2xpZGVNYXhXaWR0aFNob3VsZEJlR3JlYXRlclRoYW5TbGlkZVdpZHRoKCk7XHJcbiAgICB0aGlzLnNsaWRlV2lkdGhBbmRHYXBTaG91bGRCZUdyZWF0ZXJUaGFuWmVybygpO1xyXG4gICAgdGhpcy5yZXF1aXJlZENsYXNzU2hvdWxkQmVBZGRlZCgpO1xyXG4gIH1cclxuXHJcbiAgc2xpZGVNYXhXaWR0aFNob3VsZEJlR3JlYXRlclRoYW5TbGlkZVdpZHRoKCkge1xyXG4gICAgaWYgKHRoaXMuc2xpZGVNYXhXaWR0aCA8IHRoaXMuc2xpZGVXaWR0aCkge1xyXG4gICAgICB0aHJvdyBuZXcgRXJyb3IoXHJcbiAgICAgICAgYHNsaWRlTWF4V2lkdGggKHZhbHVlOiAke3RoaXMuc2xpZGVNYXhXaWR0aH0pIGlzIGxvd2VyIHRoYW4gc2xpZGVXaWR0aCAodmFsdWU6ICR7dGhpcy5zbGlkZVdpZHRofSkuIFBsZWFzZSBpbmNyZWFzZSB0aGUgbWF4IHdpZHRoIG9yIGRlY3JlYXNlIHRoZSBzbGlkZSB3aWR0aC5gXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG5cclxuICBzbGlkZVdpZHRoQW5kR2FwU2hvdWxkQmVHcmVhdGVyVGhhblplcm8oKSB7XHJcbiAgICBjb25zdCBzbGlkZVdpZHRoUGx1c0dhcCA9IHRoaXMuc2xpZGVXaWR0aCArIHRoaXMuZ2FwO1xyXG5cclxuICAgIGlmIChzbGlkZVdpZHRoUGx1c0dhcCA8PSAwKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgICAnVW5hYmxlIHRvIGNvbnN0cnVjdCBDYXJvdXNlbC4gU2xpZGVXaWR0aCBhbmQgZ2FwIGxvd2VyIG9yIGVxdWFsIHRoYW4gemVyby4gUGxlYXNlIGFkZCBhIHBvc2l0aXZlIHZhbHVlIGZvciB0aGUgc2xpZGVXaWR0aCBhbmQgZ2FwLidcclxuICAgICAgKTtcclxuICAgIH1cclxuICB9XHJcblxyXG4gIHJlcXVpcmVkQ2xhc3NTaG91bGRCZUFkZGVkKCkge1xyXG4gICAgY29uc3QgY2Fyb3VzZWxTbGlkZXM6IE5vZGVMaXN0T2Y8SFRNTERpdkVsZW1lbnQ+IHwgdW5kZWZpbmVkID1cclxuICAgICAgdGhpcy5jYXJvdXNlbC5xdWVyeVNlbGVjdG9yQWxsKCcuY2Fyb3VzZWwtc2xpZGUnKTtcclxuXHJcbiAgICBpZiAoY2Fyb3VzZWxTbGlkZXMubGVuZ3RoID09PSAwKSB7XHJcbiAgICAgIHRocm93IG5ldyBFcnJvcihcclxuICAgICAgICAnTm8gZWxlbWVudHMgd2l0aCBcImNhcm91c2VsLXNsaWRlXCIgYXMgY2xhc3MgaGF2ZSBiZWVuIGZvdW5kLiBQbGVhc2UgYWRkIHRoaXMgY2xhc3MgdG8gZWFjaCBvZiB5b3VyIGNhcmRzL3NsaWRlcy4nXHJcbiAgICAgICk7XHJcbiAgICB9XHJcbiAgfVxyXG59XHJcbiJdfQ==