{"version":3,"file":"ngx-carousel-ease.mjs","sources":["../../../projects/carousel/src/lib/carousel.ts","../../../projects/carousel/src/lib/slider.ts","../../../projects/carousel/src/lib/validation.ts","../../../projects/carousel/src/lib/carousel.service.ts","../../../projects/carousel/src/lib/carousel.component.ts","../../../projects/carousel/src/lib/carousel.component.html","../../../projects/carousel/src/lib/carousel.module.ts","../../../projects/carousel/src/public-api.ts","../../../projects/carousel/src/ngx-carousel-ease.ts"],"sourcesContent":["export class Carousel {\r\n  slides!: NodeListOf<HTMLDivElement>;\r\n  originalSlideWidth!: number;\r\n  slideWidthWithGap!: number;\r\n  numberDots!: number;\r\n  arrayNumberDots: number[] = [];\r\n  slidesContainer!: HTMLDivElement;\r\n  maxScrollableContent = 0;\r\n  totalSlides = 0;\r\n  initialSlideToShow = 1;\r\n  paddingCarousel = 0;\r\n  carouselWidth!: number;\r\n  widthSlideContainer!: number;\r\n  arrayOfSlides: HTMLDivElement[] = [];\r\n\r\n  constructor(\r\n    private readonly carousel: HTMLDivElement,\r\n    private readonly maxWidthCarousel: number,\r\n    public slideToShow: number,\r\n    public slideWidth: number,\r\n    public readonly slideMaxWidth: number,\r\n    public readonly gap: number,\r\n    private readonly responsive: boolean,\r\n    private readonly loop: boolean\r\n  ) {\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.paddingCarousel = this.getPaddingCarousel();\r\n    this.initialSlideToShow = this.slideToShow;\r\n    this.slidesContainer = this.selectSlidesContainer();\r\n    this.slides = this.selectSlides();\r\n    this.arrayOfSlides = this.slidesToArray();\r\n    this.totalSlides = this.slides.length;\r\n    this.originalSlideWidth = this.slideWidth;\r\n    this.setWidthSlides();\r\n    this.setMaxWidthCarousel();\r\n    this.updateProperties();\r\n    this.slidesContainer.style.gap = `${this.gap}px`;\r\n    this.setDraggableImgToFalse();\r\n  }\r\n\r\n  /**\r\n   * Set the slide width and max width\r\n   * NB: In responsive mode, width is automatically adapted through the setAutoColumnSlideContainer() method.\r\n   *\r\n   */\r\n  setWidthSlides() {\r\n    for (const slide of this.slides) {\r\n      slide.style.maxWidth = `${this.slideMaxWidth}px`;\r\n      slide.style.width = '100%';\r\n      slide.style.userSelect = 'none';\r\n\r\n      if (!this.responsive) {\r\n        slide.style.width = `${this.slideWidth}px`;\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Update carousel properties\r\n   * Occurs at start and at resizing.\r\n   */\r\n  updateProperties() {\r\n    this.carouselWidth = this.carousel.clientWidth;\r\n    if (this.responsive) {\r\n      this.updateSlideToShowResponsive();\r\n      this.setAutoColumnSlideContainer();\r\n    } else {\r\n      this.updateSlideToShowNotResponsive();\r\n    }\r\n\r\n    this.numberDots = this.setNumberDots();\r\n    this.arrayNumberDots = [...Array(this.numberDots).keys()];\r\n\r\n    this.slideWidthWithGap = this.slideWidth + this.gap;\r\n    this.setWidthSlideContainer();\r\n    this.maxScrollableContent = this.getMaxScroll();\r\n  }\r\n\r\n  /**\r\n   * Update slide to show (responsive mode)\r\n   * Computes the number of slide fitting\r\n   */\r\n  updateSlideToShowResponsive() {\r\n    const slideWidthPlusGap = this.originalSlideWidth + this.gap;\r\n\r\n    const referenceWidth = Math.min(\r\n      this.carouselWidth,\r\n      this.maxWidthCarousel || Infinity,\r\n      window.innerWidth\r\n    );\r\n\r\n    const slideFitting = Math.floor(referenceWidth / slideWidthPlusGap) || 1;\r\n\r\n    this.determineSlideToShow(slideFitting);\r\n  }\r\n\r\n  /**\r\n   * Determine slide to show\r\n   * Useful to compute the slide displayed on screen and for the slider class.\r\n   * In not responsive mode, the maximum slides to show is determined by the maximum available space and the width of the slide set by the user.\r\n   */\r\n  determineSlideToShow(slideFitting: number) {\r\n    const maxSlidesToShow = this.responsive\r\n      ? this.initialSlideToShow\r\n      : this.totalSlides;\r\n\r\n    this.slideToShow = Math.min(slideFitting, maxSlidesToShow);\r\n  }\r\n\r\n  /**\r\n   * Update slide to show (not responsive mode)\r\n   * Computes the number of slide fitting. The number of slides to be shown are determined by the number of slides fitting within its container.\r\n   */\r\n  updateSlideToShowNotResponsive() {\r\n    const slideWidthPlusGap = this.slideWidth + this.gap;\r\n\r\n    const referenceWidth = Math.min(\r\n      this.carouselWidth,\r\n      this.maxWidthCarousel || Infinity,\r\n      window.innerWidth\r\n    );\r\n\r\n    const numberOfSlidesComputed =\r\n      Math.floor(referenceWidth / slideWidthPlusGap) || 1;\r\n    const slideFitting = Math.min(numberOfSlidesComputed, this.totalSlides);\r\n\r\n    this.determineSlideToShow(slideFitting);\r\n  }\r\n\r\n  getPaddingCarousel() {\r\n    const computedStyle = window.getComputedStyle(this.carousel);\r\n    const paddingLeft = computedStyle.getPropertyValue('padding-left');\r\n    const paddingRight = computedStyle.getPropertyValue('padding-right');\r\n\r\n    return parseFloat(paddingLeft) + parseFloat(paddingRight);\r\n  }\r\n\r\n  setMaxWidthCarousel() {\r\n    this.carousel.style.maxWidth = `${this.maxWidthCarousel}px`;\r\n  }\r\n\r\n  /**\r\n   * Set the with of a slide, responsive mode\r\n   * There are [n cards - 1] gaps (3 cards, 2 gaps)\r\n   */\r\n  setAutoColumnSlideContainer() {\r\n    const windowWidth =\r\n      this.carouselWidth -\r\n      this.paddingCarousel -\r\n      (this.slideToShow - 1) * this.gap;\r\n\r\n    const widthPerSlide = windowWidth / this.slideToShow;\r\n    this.slidesContainer.style.gridAutoColumns = `${widthPerSlide}px`;\r\n\r\n    this.slideWidth = widthPerSlide;\r\n  }\r\n\r\n  /**\r\n   * Define the slide container width\r\n   * Make non visible gaps of non visible cards scrollable and is used to compute the maxScrollableContent (strechingEffect)\r\n   */\r\n  setWidthSlideContainer() {\r\n    this.widthSlideContainer =\r\n      this.selectSlides().length * this.slideWidthWithGap - this.gap;\r\n    this.slidesContainer.style.width = `${this.widthSlideContainer}px`;\r\n  }\r\n\r\n  selectSlides(): NodeListOf<HTMLDivElement> {\r\n    return this.carousel.querySelectorAll('.carousel-slide');\r\n  }\r\n\r\n  slidesToArray() {\r\n    return Array.from(this.slides);\r\n  }\r\n\r\n  selectSlidesContainer() {\r\n    return this.carousel.querySelector('.slides-container') as HTMLDivElement;\r\n  }\r\n\r\n  /**\r\n   * Set number of dots\r\n   * If infinite mode, one more window than normal mode.\r\n   */\r\n  setNumberDots() {\r\n    if (this.loop) {\r\n      return this.totalSlides === this.slideToShow ? 1 : this.totalSlides;\r\n    }\r\n\r\n    return this.slideToShow > 1\r\n      ? this.totalSlides - this.slideToShow + 1\r\n      : this.totalSlides;\r\n  }\r\n\r\n  /**\r\n   * Get the max scrollable content\r\n   * Useful for the streching effect (not infinite mode), end of the slides\r\n   */\r\n  getMaxScroll() {\r\n    return (this.numberDots - 1) * this.slideWidthWithGap;\r\n  }\r\n\r\n  setDraggableImgToFalse() {\r\n    const images = this.slidesContainer.querySelectorAll('img');\r\n    images?.forEach((image) => {\r\n      image.setAttribute('draggable', 'false');\r\n    });\r\n  }\r\n}\r\n","import { Carousel } from './carousel';\r\nimport { CarouselService } from './carousel.service';\r\n\r\nexport class Slider {\r\n  dragging = false;\r\n  currentSlide = 0;\r\n  lastWindow = 0;\r\n  currentTranslation = 0;\r\n  previousTranslation = 0;\r\n  direction: 'right' | 'left' = 'right';\r\n  startX = 0;\r\n  previousX = 0;\r\n  currentX = 0;\r\n  positionChange = 0;\r\n  prevLimit = 0;\r\n  nextLimit = 0;\r\n  slidesContainer!: HTMLDivElement;\r\n  arrayOfSlides!: HTMLDivElement[];\r\n  totalAmountOfSlides!: number;\r\n  initialFullWidth = 0;\r\n  lastWindowTranslation = 0;\r\n  totalSlides = 0;\r\n  DOMLimitReached = false;\r\n  visibleOffsetCardNotResponsive = 0;\r\n  invisibleOffsetCardNotResponsive = 0;\r\n  accumulatedSlide = 0;\r\n  currentCarouselID = 0;\r\n\r\n  constructor(\r\n    private readonly carousel: Carousel,\r\n    private readonly responsive: boolean,\r\n    private readonly slideToScroll: number,\r\n    private readonly LIMIT_AUTO_SLIDE: number,\r\n    private readonly strechingLimit: number,\r\n    private readonly autoSlide: boolean,\r\n    private readonly animationTimingFn: string,\r\n    private readonly animationTimingMs: number,\r\n    private readonly MAX_DOM_SIZE: number,\r\n    private readonly enableMouseDrag: boolean,\r\n    private readonly enableTouch: boolean,\r\n    private readonly infinite: boolean,\r\n    private carouselService: CarouselService\r\n  ) {\r\n    this.initProperties();\r\n    this.updateProperties();\r\n    this.addSlidesToRightAtStart();\r\n  }\r\n\r\n  initProperties() {\r\n    this.slidesContainer = this.carousel.slidesContainer;\r\n    this.arrayOfSlides = this.carousel.arrayOfSlides;\r\n\r\n    this.totalSlides = this.carousel.totalSlides;\r\n    this.totalAmountOfSlides = this.totalSlides;\r\n\r\n    this.nextLimit = Math.floor(this.carousel.slideWidthWithGap);\r\n    this.prevLimit = -this.carousel.slideWidthWithGap;\r\n\r\n    this.carouselService.carouselID += 1;\r\n    this.currentCarouselID = this.carouselService.carouselID;\r\n  }\r\n\r\n  /**\r\n   * Update properties of the slider\r\n   * Fired at start and at resizing.\r\n   */\r\n  updateProperties() {\r\n    this.lastWindow = this.carousel.numberDots - 1;\r\n\r\n    this.updateNotResponsive();\r\n\r\n    this.initialFullWidth = this.totalSlides * this.carousel.slideWidthWithGap;\r\n\r\n    this.lastWindowTranslation =\r\n      this.slidesContainer.clientWidth -\r\n      this.carousel.slideToShow * this.carousel.slideWidthWithGap +\r\n      this.carousel.gap;\r\n\r\n    this.lastWindowTranslation += this.responsive\r\n      ? 0\r\n      : -this.visibleOffsetCardNotResponsive - this.carousel.gap;\r\n\r\n    this.carousel.maxScrollableContent =\r\n      this.carousel.widthSlideContainer -\r\n      this.carousel.carouselWidth +\r\n      this.carousel.paddingCarousel;\r\n\r\n    if (this.carousel.numberDots === 1) {\r\n      // if all slides visible in one window, max scrollable content equals 0\r\n      this.carousel.maxScrollableContent = 0;\r\n    }\r\n  }\r\n\r\n  updateNotResponsive() {\r\n    if (this.responsive) return;\r\n\r\n    // visible part of the offset of the card in px\r\n    this.visibleOffsetCardNotResponsive =\r\n      this.carousel.carouselWidth -\r\n      this.carousel.slideToShow * this.carousel.slideWidthWithGap -\r\n      this.carousel.paddingCarousel;\r\n\r\n    this.invisibleOffsetCardNotResponsive =\r\n      this.carousel.slideWidth - this.visibleOffsetCardNotResponsive;\r\n  }\r\n\r\n  /**\r\n   * Add slides to the right at start\r\n   * If only one window (number of dots === 1) and not responsive mode, there is possibly space at start for slides to the right (even though this configuration does not make a lot of sense)\r\n   */\r\n  addSlidesToRightAtStart() {\r\n    if (this.carousel.numberDots > 1 || this.responsive || !this.infinite) {\r\n      return;\r\n    }\r\n\r\n    this.addSlidesToTheRight();\r\n  }\r\n\r\n  /**\r\n   * Fired at drag start\r\n   * Instantiate property of the starting drag point on the X axis. Used to compute the translation.\r\n   * Disabling the transition while applying the transformation because of the attached animation.\r\n   */\r\n  dragStart(event: MouseEvent | TouchEvent) {\r\n    if (this.currentEventIsDisabled(event)) return;\r\n\r\n    this.dragging = true;\r\n\r\n    this.startX =\r\n      event instanceof MouseEvent ? event.pageX : event.touches[0].pageX;\r\n\r\n    // Useful for direction detection\r\n    this.previousX = this.startX;\r\n    this.slidesContainer.style.transition = 'none';\r\n  }\r\n\r\n  /**\r\n   * Fired at drag end\r\n   * If not infinite mode and limits reached (start or end), put back to the current slide. Updates previous translation.\r\n   */\r\n  dragStop(event: MouseEvent | TouchEvent) {\r\n    if (this.currentEventIsDisabled(event)) return;\r\n    this.dragging = false;\r\n    this.previousTranslation = this.currentTranslation;\r\n\r\n    if (this.autoSlide) this.autoSlider();\r\n\r\n    if (this.infinite) return;\r\n\r\n    const limit =\r\n      this.currentTranslation > 0 ||\r\n      -this.currentTranslation > this.lastWindowTranslation;\r\n\r\n    if (limit) {\r\n      this.computeTransformation(this.currentSlide);\r\n    }\r\n  }\r\n\r\n  currentEventIsDisabled(event: MouseEvent | TouchEvent) {\r\n    return (\r\n      (event instanceof MouseEvent && !this.enableMouseDrag) ||\r\n      (event instanceof TouchEvent && !this.enableTouch)\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Update the direction\r\n   * Do not update the direction in case of the same previous position.\r\n   */\r\n  setDirection() {\r\n    if (this.previousX > this.currentX) {\r\n      this.direction = 'right';\r\n    } else if (this.previousX < this.currentX) {\r\n      this.direction = 'left';\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Fired at dragging\r\n   * Compute the translation, change the slide number, update the direction.\r\n   */\r\n  dragMove(event: MouseEvent | TouchEvent) {\r\n    if (this.currentEventIsDisabled(event)) return;\r\n    if (!this.dragging) return;\r\n\r\n    this.currentX =\r\n      event instanceof MouseEvent ? event.pageX : event.changedTouches[0].pageX;\r\n\r\n    this.setDirection();\r\n    this.previousX = this.currentX;\r\n\r\n    this.positionChange = this.currentX - this.startX;\r\n    this.currentTranslation = this.positionChange + this.previousTranslation;\r\n\r\n    // Current translation exceeding start of end limits, finite mode\r\n    if (!this.infinite) {\r\n      if (this.strechingEffect()) return;\r\n    }\r\n\r\n    this.slidesContainer.style.transform = `translate3d(${this.currentTranslation}px, 0, 0)`;\r\n\r\n    this.modifyCurrentSlide();\r\n  }\r\n\r\n  strechingEffect() {\r\n    return (\r\n      (this.currentTranslation > this.strechingLimit &&\r\n        this.currentSlide === 0) ||\r\n      this.currentTranslation <\r\n        -this.carousel.maxScrollableContent - this.strechingLimit\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Modify current slide\r\n   * Take into account finite and infinite mode and auto slide.\r\n   * Responsible for changing slide number and updating the limits.\r\n   * If createSlidesInfiniteModeIfLimitsReached() doesn't take action, slide change according to previous computed limits.\r\n   * In finite mode, if all slides visible on one window or end of carousel, early return to not trigger Rxjs Subject.\r\n   */\r\n  modifyCurrentSlide() {\r\n    if (this.infinite) {\r\n      if (this.createSlidesInfiniteModeIfLimits()) return;\r\n    }\r\n\r\n    if (\r\n      !this.infinite &&\r\n      (this.carousel.numberDots === 1 ||\r\n        (this.currentSlide === this.lastWindow && this.direction === 'right'))\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    if (-this.currentTranslation < this.prevLimit) {\r\n      this.changeSlideNumber(-1);\r\n      this.decreaseLimits();\r\n    } else if (-this.currentTranslation >= this.nextLimit) {\r\n      this.changeSlideNumber(1);\r\n      this.increaseLimits();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Handle slide creation in infinite mode if limits reached\r\n   * Mouse or touch drag.\r\n   */\r\n  createSlidesInfiniteModeIfLimits() {\r\n    if (this.currentTranslation > 0) {\r\n      this.addSlidesToTheLeft();\r\n      this.decreaseLimits(true);\r\n\r\n      // not enabled at start\r\n      if (this.currentSlide > 0) {\r\n        this.changeSlideNumber(-1);\r\n      }\r\n      return true;\r\n    } else if (-this.currentTranslation > this.lastWindowTranslation) {\r\n      this.addSlidesToTheRight();\r\n\r\n      if (this.DOMLimitReached) {\r\n        this.changePrevAndNextLimits(this.accumulatedSlide);\r\n        return true;\r\n      }\r\n    }\r\n\r\n    return false;\r\n  }\r\n\r\n  /**\r\n   * Auto slide card if option enabled, applied on both directions.\r\n   * Prevents auto slide on limits in finite mode (if streching < limit auto slide).\r\n   * If only one slide is displayed (slideToShow === 1), the width of the slide corresponds to the window's width (a dot). Hence, taking the min between the two.\r\n   * In non responsive and non infinite, there is possibly an offset of the current limit.\r\n   */\r\n  autoSlider() {\r\n    if (\r\n      !this.infinite &&\r\n      (this.currentTranslation > 0 ||\r\n        -this.currentTranslation > this.lastWindowTranslation)\r\n    ) {\r\n      return;\r\n    }\r\n\r\n    const referenceWidth = Math.min(\r\n      this.carousel.slideWidth,\r\n      this.carousel.slideMaxWidth || Infinity\r\n    );\r\n    let currentLimit = this.prevLimit + this.carousel.slideWidthWithGap;\r\n\r\n    if (\r\n      !this.responsive &&\r\n      !this.infinite &&\r\n      this.currentSlide > this.lastWindow - 1\r\n    ) {\r\n      currentLimit = this.lastWindowTranslation;\r\n    }\r\n\r\n    // previousTranslation always a negative number, currentLimit always positive\r\n    const currentPositionChange = this.previousTranslation + currentLimit;\r\n    const moveComparedToSlide = (currentPositionChange / referenceWidth) * 100;\r\n\r\n    if (\r\n      moveComparedToSlide < -this.LIMIT_AUTO_SLIDE ||\r\n      moveComparedToSlide > this.LIMIT_AUTO_SLIDE\r\n    ) {\r\n      if (moveComparedToSlide > this.LIMIT_AUTO_SLIDE) {\r\n        this.changeSlideNumber(-1);\r\n        this.decreaseLimits();\r\n      } else {\r\n        this.changeSlideNumber(1);\r\n        this.increaseLimits();\r\n\r\n        if (\r\n          -this.currentTranslation > this.lastWindowTranslation &&\r\n          this.infinite\r\n        ) {\r\n          this.addSlidesToTheRight();\r\n        }\r\n      }\r\n\r\n      this.computeTransformation(this.accumulatedSlide);\r\n    } else {\r\n      // put back to current slide\r\n      this.computeTransformation(this.accumulatedSlide);\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Append or prepend new slides according to the direction\r\n   * If new slides prepended, update the translation to the correct place (appending new slides do not change the translation).\r\n   * Limit DOM growth or update last window translation if applicable.\r\n   */\r\n  appendOrPrependNElements() {\r\n    if (this.direction === 'left') {\r\n      for (let i = this.arrayOfSlides.length - 1; i >= 0; i--) {\r\n        const clonedElement = this.arrayOfSlides[i].cloneNode(true);\r\n        this.slidesContainer.prepend(clonedElement);\r\n      }\r\n\r\n      this.accumulatedSlide += this.totalSlides;\r\n      this.resetViewLeftDirection();\r\n    } else {\r\n      for (let i = 0; i < this.arrayOfSlides.length; i++) {\r\n        const clonedElement = this.arrayOfSlides[i].cloneNode(true);\r\n        this.slidesContainer.append(clonedElement);\r\n      }\r\n    }\r\n\r\n    if (this.totalAmountOfSlides >= this.MAX_DOM_SIZE * this.totalSlides) {\r\n      // Limit DOM growth, max X times original DOM\r\n      // console.log('dom limit reached');\r\n      this.limitDOMGrowth();\r\n      this.DOMLimitReached = true;\r\n    } else {\r\n      this.totalAmountOfSlides += this.totalSlides;\r\n      this.DOMLimitReached = false;\r\n      this.updateLastWindowTranslation();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Limit DOM growth\r\n   * Reset the view accordingly.\r\n   */\r\n  limitDOMGrowth() {\r\n    const slides = this.carousel.selectSlides();\r\n\r\n    if (this.direction === 'right') {\r\n      for (let i = 0; i < this.totalSlides; i++) {\r\n        slides[i].remove();\r\n      }\r\n\r\n      this.resetViewRightDirection();\r\n      this.accumulatedSlide -= this.totalSlides;\r\n    } else {\r\n      for (\r\n        let i = slides.length - 1;\r\n        i > slides.length - this.totalSlides - 1;\r\n        i--\r\n      ) {\r\n        slides[i].remove();\r\n      }\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Reset the view in a movement to the left\r\n   * New slides added to the left, so the view has to be updated accordingly.\r\n   * If the carousel is moved with the mouse | touch event (dragging is true), the offset should be equal to a full carousel width. Otherwise (with the buttons), the computed translation should be taken into account.\r\n   * Side comment: the view does not have to be updated for slides added to the right, since relative order does not change.\r\n   * getBoundingClientRect triggers reflow of the element.\r\n   */\r\n  resetViewLeftDirection() {\r\n    const translation =\r\n      Math.abs(this.previousTranslation) + this.initialFullWidth;\r\n    this.previousTranslation = -translation;\r\n\r\n    this.slidesContainer.style.transition = 'none';\r\n    this.slidesContainer.style.transform = `translate3d(${\r\n      this.dragging ? -this.initialFullWidth : -translation\r\n    }px, 0px, 0px)`;\r\n\r\n    this.slidesContainer.getBoundingClientRect();\r\n  }\r\n\r\n  /**\r\n   * Reset the view in a movement to the right\r\n   * First set of slides have been deleted, so the translation has to be updated accordingly.\r\n   * currentTranslation is a negative number so it will be decreased by a set of slides.\r\n   * getBoundingClientRect triggers reflow of the element.\r\n   */\r\n  resetViewRightDirection() {\r\n    const translation = this.currentTranslation + this.initialFullWidth;\r\n\r\n    this.slidesContainer.style.transition = 'none';\r\n    this.slidesContainer.style.transform = `translate3d(${translation}px, 0px, 0px)`;\r\n    this.previousTranslation = translation - this.positionChange;\r\n\r\n    this.slidesContainer.getBoundingClientRect();\r\n  }\r\n\r\n  /**\r\n   * Update the last window translation\r\n   * Useful to get the max translation at the end of the slides.\r\n   * In not responsive mode, there is possibly a not fully displayed card (card offset).\r\n   */\r\n  updateLastWindowTranslation() {\r\n    const total = this.totalAmountOfSlides * this.carousel.slideWidthWithGap;\r\n\r\n    this.lastWindowTranslation =\r\n      total - this.carousel.slideToShow * this.carousel.slideWidthWithGap;\r\n\r\n    this.lastWindowTranslation += this.responsive\r\n      ? 0\r\n      : -this.visibleOffsetCardNotResponsive - this.carousel.gap;\r\n  }\r\n\r\n  addSlidesToTheLeft() {\r\n    this.appendOrPrependNElements();\r\n  }\r\n\r\n  addSlidesToTheRight() {\r\n    this.appendOrPrependNElements();\r\n  }\r\n\r\n  /**\r\n   * Decrease limit (movement to the left)\r\n   * In infinite mode, take full width of a set if on the first slide as new slides are created to the left (a whole set offset).\r\n   * Exception: if not responsive (card offset) and finite carousel, the next limit is at the maximum (the end of the carousel)\r\n   */\r\n  decreaseLimits(slidesCreatedOnTheLeft = false) {\r\n    let translationCorrectionAfterClone = this.prevLimit;\r\n\r\n    if (slidesCreatedOnTheLeft) {\r\n      translationCorrectionAfterClone = this.initialFullWidth;\r\n    }\r\n\r\n    this.prevLimit =\r\n      translationCorrectionAfterClone - this.carousel.slideWidthWithGap;\r\n\r\n    this.nextLimit = this.prevLimit + 2 * this.carousel.slideWidthWithGap;\r\n\r\n    if (\r\n      !this.responsive &&\r\n      !this.infinite &&\r\n      this.currentSlide >= this.lastWindow - 1\r\n    ) {\r\n      this.nextLimit = this.lastWindowTranslation;\r\n    }\r\n\r\n    this.prevLimit = Math.floor(this.prevLimit);\r\n    this.nextLimit = Math.floor(this.nextLimit);\r\n\r\n    // console.log(this.prevLimit, this.nextLimit);\r\n  }\r\n\r\n  /**\r\n   * Increase limit on basis of previous computed limits (movement to the right)\r\n   * Schema: || previous | current || next\r\n   * Exception: if not responsive (card offset) and finite carousel, the next limit is at the maximum (the end of the carousel)\r\n   */\r\n  increaseLimits() {\r\n    this.nextLimit += Math.floor(this.carousel.slideWidthWithGap);\r\n    this.prevLimit = Math.floor(\r\n      this.nextLimit - this.carousel.slideWidthWithGap * 2\r\n    );\r\n\r\n    if (\r\n      !this.responsive &&\r\n      !this.infinite &&\r\n      this.currentSlide >= this.lastWindow - 1\r\n    ) {\r\n      this.nextLimit = this.lastWindowTranslation;\r\n\r\n      if (this.currentSlide === this.lastWindow) {\r\n        // only update previous limit if last slide reached\r\n        this.prevLimit = Math.floor(\r\n          this.nextLimit - this.invisibleOffsetCardNotResponsive\r\n        );\r\n      }\r\n    }\r\n\r\n    // console.log(this.prevLimit, this.nextLimit);\r\n  }\r\n\r\n  /**\r\n   * Change prev and next limit on basis of the provided slide number\r\n   * Prev and next limit are always calculated as the following:\r\n   * || <= prev | current || <= next\r\n   */\r\n  changePrevAndNextLimits(slideNumber: number) {\r\n    const limitInPX = slideNumber * this.carousel.slideWidthWithGap;\r\n    this.nextLimit = Math.floor(limitInPX + this.carousel.slideWidthWithGap);\r\n\r\n    this.prevLimit = Math.floor(\r\n      this.nextLimit - this.carousel.slideWidthWithGap * 2\r\n    );\r\n\r\n    // console.log(this.prevLimit, this.nextLimit);\r\n  }\r\n\r\n  /**\r\n   * Previous button navigation\r\n   */\r\n  prev() {\r\n    this.direction = 'left';\r\n    if (this.infinite) {\r\n      this.handleBtnInfinite(-this.slideToScroll);\r\n    }\r\n\r\n    this.changeSlideNumber(-this.slideToScroll);\r\n    this.changePrevAndNextLimits(this.accumulatedSlide);\r\n    this.computeTransformation(this.accumulatedSlide);\r\n  }\r\n\r\n  /**\r\n   * Next button navigation\r\n   */\r\n  next() {\r\n    this.direction = 'right';\r\n    if (this.infinite) {\r\n      this.handleBtnInfinite(this.slideToScroll);\r\n    }\r\n\r\n    this.changeSlideNumber(this.slideToScroll);\r\n    this.changePrevAndNextLimits(this.accumulatedSlide);\r\n    this.computeTransformation(this.accumulatedSlide);\r\n  }\r\n\r\n  /**\r\n   * Buttons navigation in infinite mode\r\n   * Create new slide if limits reached (start or end). Update slide, limits and apply transformation accordingly.\r\n   */\r\n  handleBtnInfinite(step: number) {\r\n    let cardOffset = 0;\r\n    const goingTo = this.accumulatedSlide + step;\r\n\r\n    // there is (possibly) a card offset if not responsive\r\n    if (!this.responsive) cardOffset = 1;\r\n\r\n    if (goingTo < 0) {\r\n      this.addSlidesToTheLeft();\r\n    } else if (\r\n      goingTo + this.carousel.slideToShow + cardOffset >\r\n      this.totalAmountOfSlides\r\n    ) {\r\n      this.addSlidesToTheRight();\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Navigation with bullet points\r\n   * Update values accordingly.\r\n   */\r\n  goTo(bullet: number) {\r\n    this.direction = this.currentSlide < bullet ? 'right' : 'left';\r\n\r\n    this.currentSlide = bullet;\r\n    this.carouselService.onChange(this.currentSlide, this.currentCarouselID);\r\n\r\n    if (this.infinite) {\r\n      this.navInfiniteBullets(bullet);\r\n      return;\r\n    }\r\n\r\n    this.accumulatedSlide = this.currentSlide;\r\n    this.changePrevAndNextLimits(bullet);\r\n    this.computeTransformation(bullet);\r\n  }\r\n\r\n  /**\r\n   * Bullets navigation\r\n   * Create new slides if exceeding end of carousel.\r\n   */\r\n  navInfiniteBullets(bullet: number) {\r\n    let cardOffset = 0;\r\n    const positionOfCurrentSlide = this.accumulatedSlide % this.totalSlides;\r\n    const difference = bullet - positionOfCurrentSlide;\r\n    this.accumulatedSlide += difference;\r\n\r\n    // there is (possibly) a card offset if not responsive\r\n    if (!this.responsive) cardOffset = 1;\r\n\r\n    if (\r\n      this.accumulatedSlide + this.carousel.slideToShow + cardOffset >\r\n      this.totalAmountOfSlides\r\n    ) {\r\n      this.addSlidesToTheRight();\r\n    }\r\n\r\n    this.computeTransformation(this.accumulatedSlide);\r\n    this.changePrevAndNextLimits(this.accumulatedSlide);\r\n  }\r\n\r\n  /**\r\n   * Responsible for changing slide number in finite and infinite mode\r\n   * Exception: if only one window (numberDots === 1), update the accumulatedSlide to let the transformation occurs, but currentSlide should stay at 0.\r\n   */\r\n  changeSlideNumber(step: number) {\r\n    if (this.infinite) {\r\n      this.infiniteChangeSlideNumber(step);\r\n    } else {\r\n      this.finiteChangeSlideNumber(step);\r\n    }\r\n\r\n    if (this.carousel.numberDots === 1) {\r\n      this.currentSlide = 0;\r\n    }\r\n\r\n    const current =\r\n      this.carousel.numberDots > 1 ? this.currentSlide : this.accumulatedSlide;\r\n    this.carouselService.onChange(current, this.currentCarouselID);\r\n  }\r\n\r\n  infiniteChangeSlideNumber(step: number) {\r\n    this.accumulatedSlide += step;\r\n    this.currentSlide += step;\r\n\r\n    if (this.currentSlide > this.lastWindow) {\r\n      const surplus = this.currentSlide % this.lastWindow;\r\n      this.currentSlide = surplus - 1;\r\n    } else if (this.currentSlide < 0) {\r\n      const surplus = this.currentSlide % this.lastWindow;\r\n      this.currentSlide = this.totalSlides + surplus;\r\n    }\r\n  }\r\n\r\n  finiteChangeSlideNumber(step: number) {\r\n    this.currentSlide += step;\r\n\r\n    if (this.currentSlide > this.lastWindow) {\r\n      this.currentSlide = this.lastWindow;\r\n    } else if (this.currentSlide < 0) {\r\n      this.currentSlide = 0;\r\n    }\r\n\r\n    this.accumulatedSlide = this.currentSlide;\r\n  }\r\n\r\n  /**\r\n   * Compute transformation that will be applied on basis of the provided slide number\r\n   * Exception: if not responsive (card offset) and finite carousel, the next limit is the end of the carousel\r\n   */\r\n  computeTransformation(slide: number) {\r\n    let transformation = slide * this.carousel.slideWidthWithGap;\r\n\r\n    if (\r\n      !this.responsive &&\r\n      !this.infinite &&\r\n      slide >= this.lastWindow - 1 &&\r\n      this.carousel.numberDots > 1\r\n    ) {\r\n      this.nextLimit = this.lastWindowTranslation;\r\n\r\n      if (slide === this.lastWindow) {\r\n        // if last window, go to maximum & update prev limit\r\n        transformation = this.lastWindowTranslation;\r\n        this.prevLimit = Math.floor(\r\n          this.nextLimit - this.invisibleOffsetCardNotResponsive\r\n        );\r\n      }\r\n    }\r\n\r\n    this.applyTransformation(transformation);\r\n  }\r\n\r\n  applyTransformation(transformation: number) {\r\n    this.slidesContainer.style.transition = `transform ${this.animationTimingMs}ms ${this.animationTimingFn}`;\r\n\r\n    this.slidesContainer.style.transform = `translate3d(${-transformation}px, 0px, 0px)`;\r\n\r\n    this.dragging = false;\r\n    this.previousTranslation = -transformation;\r\n    this.currentTranslation = -transformation;\r\n  }\r\n\r\n  /**\r\n   * Trigger drag stop\r\n   * If client leaves the page (navigating to another tab) and comes back, stop the dragging.\r\n   * Correct Typescript typing not possible?\r\n   */\r\n  unActiveTab(event: any) {\r\n    if (event.target.visibilityState === 'visible') {\r\n      this.dragStop(event);\r\n    }\r\n  }\r\n}\r\n","export class Validation {\r\n  constructor(\r\n    private readonly carousel: HTMLDivElement,\r\n    private readonly slideWidth: number,\r\n    private readonly slideMaxWidth: number,\r\n    private readonly gap: number\r\n  ) {\r\n    this.slideMaxWidthShouldBeGreaterThanSlideWidth();\r\n    this.slideWidthAndGapShouldBeGreaterThanZero();\r\n    this.requiredClassShouldBeAdded();\r\n  }\r\n\r\n  slideMaxWidthShouldBeGreaterThanSlideWidth() {\r\n    if (this.slideMaxWidth < this.slideWidth) {\r\n      throw new Error(\r\n        `slideMaxWidth (value: ${this.slideMaxWidth}) is lower than slideWidth (value: ${this.slideWidth}). Please increase the max width or decrease the slide width.`\r\n      );\r\n    }\r\n  }\r\n\r\n  slideWidthAndGapShouldBeGreaterThanZero() {\r\n    const slideWidthPlusGap = this.slideWidth + this.gap;\r\n\r\n    if (slideWidthPlusGap <= 0) {\r\n      throw new Error(\r\n        'Unable to construct Carousel. SlideWidth and gap lower or equal than zero. Please add a positive value for the slideWidth and gap.'\r\n      );\r\n    }\r\n  }\r\n\r\n  requiredClassShouldBeAdded() {\r\n    const carouselSlides: NodeListOf<HTMLDivElement> | undefined =\r\n      this.carousel.querySelectorAll('.carousel-slide');\r\n\r\n    if (carouselSlides.length === 0) {\r\n      throw new Error(\r\n        'No elements with \"carousel-slide\" as class have been found. Please add this class to each of your cards/slides.'\r\n      );\r\n    }\r\n  }\r\n}\r\n","import { Injectable } from '@angular/core';\nimport { Subject } from 'rxjs';\nimport { Sliding } from './interfaces';\n\n@Injectable({\n  providedIn: 'root',\n})\nexport class CarouselService {\n  /**\n   * An RXJS Subject that will be triggered at every slide change. Returns an object containing the zero indexed current slide number and the zero indexed carousel ID.\n   */\n  onSlideChange = new Subject<Sliding>();\n  /**\n   * Internal use only.\n   */\n  carouselID = -1;\n  /**\n   * Internal use only.\n   */\n  onChange(slide: number, currentCarouselID: number) {\n    this.onSlideChange.next({ slide, carouselID: currentCarouselID });\n  }\n}\n","import {\r\n  AfterContentInit,\r\n  AfterViewInit,\r\n  ChangeDetectionStrategy,\r\n  ChangeDetectorRef,\r\n  Component,\r\n  ElementRef,\r\n  Inject,\r\n  Input,\r\n  PLATFORM_ID,\r\n} from '@angular/core';\r\nimport { Subscription, fromEvent } from 'rxjs';\r\nimport { Carousel } from './carousel';\r\nimport { AnimationTimingFn } from './interfaces';\r\nimport { Slider } from './slider';\r\nimport { CommonModule, isPlatformBrowser } from '@angular/common';\r\nimport { Validation } from './validation';\r\nimport { CarouselService } from './carousel.service';\r\n\r\n@Component({\r\n  selector: 'carousel',\r\n  templateUrl: './carousel.component.html',\r\n  styleUrls: ['./carousel.component.css'],\r\n  imports: [CommonModule],\r\n  standalone: true,\r\n  changeDetection: ChangeDetectionStrategy.OnPush,\r\n})\r\nexport class CarouselComponent implements AfterContentInit, AfterViewInit {\r\n  @Input() maxWidthCarousel!: number;\r\n  @Input() infinite = false;\r\n  @Input() responsive = true;\r\n  @Input() autoSlide = true;\r\n  @Input() slideToShow = 3;\r\n  @Input() slideToScroll = 2;\r\n  @Input() autoslideLimitPercentCard = 30;\r\n  @Input() strechingLimit = 60;\r\n  @Input() slideWidth = 300;\r\n  @Input() slideMaxWidth = 500;\r\n  @Input() dots = true;\r\n  @Input() arrows = true;\r\n  @Input() counter = true;\r\n  @Input() enableMouseDrag = true;\r\n  @Input() enableTouch = true;\r\n  @Input() counterSeparator = '/';\r\n  @Input() gapBetweenSlides = 16;\r\n  @Input() animationTimingMs = 300;\r\n  @Input() maxDomSize = 4;\r\n  @Input() animationTimingFn: AnimationTimingFn = 'ease-out';\r\n  mouseupSubscription!: Subscription;\r\n  VChangeSubscription!: Subscription;\r\n  resizeSubscription!: Subscription;\r\n  carousel!: Carousel | undefined;\r\n  slider!: Slider | undefined;\r\n  isBrowser = true;\r\n\r\n  constructor(\r\n    private elementRef: ElementRef<HTMLDivElement>,\r\n    private changeDetection: ChangeDetectorRef,\r\n    private carouselService: CarouselService,\r\n    @Inject(PLATFORM_ID) platformId: Object\r\n  ) {\r\n    this.isBrowser = isPlatformBrowser(platformId);\r\n  }\r\n\r\n  ngAfterViewInit() {\r\n    if (!this.isBrowser) return;\r\n\r\n    const carouselContainer = this.elementRef.nativeElement\r\n      .firstChild as HTMLDivElement;\r\n\r\n    new Validation(\r\n      carouselContainer,\r\n      this.slideWidth,\r\n      this.slideMaxWidth,\r\n      this.gapBetweenSlides\r\n    );\r\n\r\n    this.carousel = new Carousel(\r\n      carouselContainer,\r\n      this.maxWidthCarousel,\r\n      this.slideToShow,\r\n      this.slideWidth,\r\n      this.slideMaxWidth,\r\n      this.gapBetweenSlides,\r\n      this.responsive,\r\n      this.infinite\r\n    );\r\n\r\n    this.slider = new Slider(\r\n      this.carousel,\r\n      this.responsive,\r\n      this.slideToScroll,\r\n      this.autoslideLimitPercentCard,\r\n      this.strechingLimit,\r\n      this.autoSlide,\r\n      this.animationTimingFn,\r\n      this.animationTimingMs,\r\n      this.maxDomSize,\r\n      this.enableMouseDrag,\r\n      this.enableTouch,\r\n      this.infinite,\r\n      this.carouselService\r\n    );\r\n\r\n    this.listeners();\r\n    this.changeDetection.markForCheck();\r\n  }\r\n\r\n  ngAfterContentInit() {}\r\n\r\n  listeners() {\r\n    this.mouseupSubscription = fromEvent(window, 'mouseup').subscribe(\r\n      (event: any) => {\r\n        if (!this.slider?.dragging) return;\r\n\r\n        this.slider?.dragStop(event);\r\n      }\r\n    );\r\n    this.VChangeSubscription = fromEvent(\r\n      document,\r\n      'visibilitychange'\r\n    ).subscribe((event) => {\r\n      this.slider?.unActiveTab(event);\r\n    });\r\n\r\n    this.resizeSubscription = fromEvent(window, 'resize').subscribe(() => {\r\n      this.resize();\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Reinitialise variables at resize\r\n   */\r\n  resize() {\r\n    if (!this.slider) return;\r\n\r\n    this.carousel?.updateProperties();\r\n    this.slider.updateProperties();\r\n\r\n    this.slider.currentSlide = 0;\r\n    this.slider.accumulatedSlide = 0;\r\n    this.slider.computeTransformation(0);\r\n    this.slider.changePrevAndNextLimits(0);\r\n    this.carouselService.onChange(\r\n      this.slider.currentSlide,\r\n      this.slider.currentCarouselID\r\n    );\r\n\r\n    this.changeDetection.markForCheck();\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    this.mouseupSubscription?.unsubscribe();\r\n    this.VChangeSubscription?.unsubscribe();\r\n    this.resizeSubscription?.unsubscribe();\r\n  }\r\n}\r\n","<div class=\"carousel-container\">\r\n  <div class=\"banner-container\">\r\n    <div class=\"btn-container\" *ngIf=\"arrows\">\r\n      <button\r\n        class=\"prev\"\r\n        aria-label=\"previous button navigation\"\r\n        (click)=\"slider?.prev()\"\r\n        [disabled]=\"\r\n          !infinite &&\r\n          ((slider?.currentSlide === 0 &&\r\n            (slider?.currentTranslation || 0) >= 0) ||\r\n            carousel?.numberDots === 1)\r\n        \"\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          height=\"16\"\r\n          width=\"16\"\r\n          viewBox=\"0 0 512 512\"\r\n        >\r\n          <path\r\n            d=\"M9.4 233.4c-12.5 12.5-12.5 32.8 0 45.3l128 128c12.5 12.5 32.8 12.5 45.3 0s12.5-32.8 0-45.3L109.3 288 480 288c17.7 0 32-14.3 32-32s-14.3-32-32-32l-370.7 0 73.4-73.4c12.5-12.5 12.5-32.8 0-45.3s-32.8-12.5-45.3 0l-128 128z\"\r\n          />\r\n        </svg>\r\n      </button>\r\n      <button\r\n        class=\"next\"\r\n        aria-label=\"next button navigation\"\r\n        (click)=\"slider?.next()\"\r\n        [disabled]=\"\r\n          !infinite &&\r\n          ((slider?.currentSlide === (carousel?.numberDots || 0) - 1 &&\r\n            (slider?.currentTranslation || 0) <=\r\n              -(carousel?.maxScrollableContent || 0)) ||\r\n            carousel?.numberDots === 1)\r\n        \"\r\n      >\r\n        <svg\r\n          xmlns=\"http://www.w3.org/2000/svg\"\r\n          height=\"16\"\r\n          width=\"16\"\r\n          viewBox=\"0 0 512 512\"\r\n        >\r\n          <path\r\n            d=\"M502.6 278.6c12.5-12.5 12.5-32.8 0-45.3l-128-128c-12.5-12.5-32.8-12.5-45.3 0s-12.5 32.8 0 45.3L402.7 224 32 224c-17.7 0-32 14.3-32 32s14.3 32 32 32l370.7 0-73.4 73.4c-12.5 12.5-12.5 32.8 0 45.3s32.8 12.5 45.3 0l128-128z\"\r\n          />\r\n        </svg>\r\n      </button>\r\n    </div>\r\n    <div class=\"counter\" *ngIf=\"counter\">\r\n      <p>\r\n        {{ (slider?.currentSlide || 0) + 1 }} {{ counterSeparator }}\r\n        {{ carousel?.numberDots }}\r\n      </p>\r\n    </div>\r\n  </div>\r\n\r\n  <div\r\n    class=\"slides-container\"\r\n    [class.dragging]=\"slider?.dragging\"\r\n    (mousedown)=\"slider?.dragStart($event)\"\r\n    (touchstart)=\"slider?.dragStart($event)\"\r\n    (mousemove)=\"slider?.dragMove($event)\"\r\n    (touchmove)=\"slider?.dragMove($event)\"\r\n    (touchend)=\"slider?.dragStop($event)\"\r\n    #slides\r\n  >\r\n    <ng-content></ng-content>\r\n  </div>\r\n\r\n  <div class=\"bullets-container\" *ngIf=\"dots\">\r\n    <button\r\n      class=\"bullet\"\r\n      aria-label=\"bullet point navigation\"\r\n      *ngFor=\"let bullet of carousel?.arrayNumberDots\"\r\n      [class.current]=\"bullet === slider?.currentSlide\"\r\n      (click)=\"slider?.goTo(bullet)\"\r\n    ></button>\r\n  </div>\r\n</div>\r\n","import { NgModule } from '@angular/core';\nimport { CarouselComponent } from './carousel.component';\nimport { CommonModule } from '@angular/common';\n\n@NgModule({\n  declarations: [],\n  imports: [CommonModule, CarouselComponent],\n  exports: [CarouselComponent],\n})\nexport class CarouselModule {}\n","/*\n * Public API Surface of carousel\n */\n\nexport * from './lib/carousel.component';\nexport * from './lib/carousel.service';\nexport * from './lib/carousel.module';\n","/**\n * Generated bundle index. Do not edit.\n */\n\nexport * from './public-api';\n"],"names":[],"mappings":"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"}